//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Required by VISA and MasterCard for domestic UK transactions processed by Financial Institutions. [Read more](https://docs.checkout.com/reference/merchant-api-reference/complex-request-objects/visa-requirements-for-financial-institutions) */
public class PaymentRecipient: Codable {

    /** The recipient's date of birth in yyyy-mm-dd format */
    public var dob: DateDay

    /** The first six digits and the last four digits of the primary recipient's card, without spaces, or, up to ten characters of the primary recipient's account number */
    public var accountNumber: String

    /** The first part of the UK postcode for example W1T 4TJ would be W1T */
    public var zip: String

    /** The last name of the recipient */
    public var lastName: String

    public init(dob: DateDay, accountNumber: String, zip: String, lastName: String) {
        self.dob = dob
        self.accountNumber = accountNumber
        self.zip = zip
        self.lastName = lastName
    }

    private enum CodingKeys: String, CodingKey {
        case dob
        case accountNumber = "account_number"
        case zip
        case lastName = "last_name"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        dob = try container.decode(.dob)
        accountNumber = try container.decode(.accountNumber)
        zip = try container.decode(.zip)
        lastName = try container.decode(.lastName)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(dob, forKey: .dob)
        try container.encode(accountNumber, forKey: .accountNumber)
        try container.encode(zip, forKey: .zip)
        try container.encode(lastName, forKey: .lastName)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PaymentRecipient else { return false }
      guard self.dob == object.dob else { return false }
      guard self.accountNumber == object.accountNumber else { return false }
      guard self.zip == object.zip else { return false }
      guard self.lastName == object.lastName else { return false }
      return true
    }

    public static func == (lhs: PaymentRecipient, rhs: PaymentRecipient) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
