//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Product: Codable {

    public var description: String?

    public var image: String?

    public var name: String?

    public var price: Int?

    public var quantity: Int?

    public var shippingCost: Int?

    public var sku: String?

    public var trackingUrl: String?

    public init(description: String? = nil, image: String? = nil, name: String? = nil, price: Int? = nil, quantity: Int? = nil, shippingCost: Int? = nil, sku: String? = nil, trackingUrl: String? = nil) {
        self.description = description
        self.image = image
        self.name = name
        self.price = price
        self.quantity = quantity
        self.shippingCost = shippingCost
        self.sku = sku
        self.trackingUrl = trackingUrl
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case image
        case name
        case price
        case quantity
        case shippingCost = "shipping_cost"
        case sku
        case trackingUrl = "tracking_url"
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        description = try container.decodeIfPresent(.description)
        image = try container.decodeIfPresent(.image)
        name = try container.decodeIfPresent(.name)
        price = try container.decodeIfPresent(.price)
        quantity = try container.decodeIfPresent(.quantity)
        shippingCost = try container.decodeIfPresent(.shippingCost)
        sku = try container.decodeIfPresent(.sku)
        trackingUrl = try container.decodeIfPresent(.trackingUrl)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(shippingCost, forKey: .shippingCost)
        try container.encodeIfPresent(sku, forKey: .sku)
        try container.encodeIfPresent(trackingUrl, forKey: .trackingUrl)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Product else { return false }
      guard self.description == object.description else { return false }
      guard self.image == object.image else { return false }
      guard self.name == object.name else { return false }
      guard self.price == object.price else { return false }
      guard self.quantity == object.quantity else { return false }
      guard self.shippingCost == object.shippingCost else { return false }
      guard self.sku == object.sku else { return false }
      guard self.trackingUrl == object.trackingUrl else { return false }
      return true
    }

    public static func == (lhs: Product, rhs: Product) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
